# -*- coding: utf-8 -*-
"""Breast_cancer_with_AI(ResNet34).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j8x2AQIdRkxdUrXqS7ibiMpAqCIODJla
"""

from google.colab import drive
drive.mount('/content/drive')

#hide
!pip install -Uqq fastbook

from fastai.vision.all import *

"""### Loading picture of breast"""

path = Path('/content/drive/MyDrive/Training Data Set')

"""### From data to data loaders(the datablock api)"""

breast = DataBlock(
    blocks=(ImageBlock, CategoryBlock),
    get_items=get_image_files,
    splitter=RandomSplitter(valid_pct=0.2, seed=42),
    get_y=parent_label,
    item_tfms=Resize(128))

dls = breast.dataloaders(path)

dls.valid.show_batch(max_n=4, nrows=1)

"""### Data Augmentation"""

bears = breast.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2))
dls = bears.dataloaders(path)
dls.train.show_batch(max_n=8, nrows=2, unique=True)

"""##Training my classifier model (galaxies)"""

#Data transform
bears = breast.new(
    item_tfms=RandomResizedCrop(224, min_scale=0.5),
    batch_tfms=aug_transforms())
dls = bears.dataloaders(path)

from fastai.metrics import accuracy_multi, F1Score, Precision, Recall

from fastai.callback import*

learn = vision_learner(dls, resnet34, metrics=[accuracy, error_rate, Precision(average='micro'),Recall(average='micro'),F1Score(average="macro")])
learn.recorder.train_metrics = True
learn.fit(3)
learn.fine_tune(100)

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

interp.plot_top_losses(5, nrows=1)

from fastai.vision.widgets import *

"""### Cleaning the top losses"""

cleaner = ImageClassifierCleaner(learn)
cleaner

#hide
for idx in cleaner.delete(): cleaner.fns[idx].unlink()
for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)

"""## Testing and turning the model into production

### Using the model for inference
"""

learn.export()

path = Path()
path.ls(file_exts='.pkl')

learn = load_learner(path/'export.pkl')

"""#### Predicting an image"""

learn.predict('great.jpeg')

"""#### Printing our target"""

learn.dls.vocab

"""## Creating a GUI in jupyter notebooks

#### Displaying thumbnail
"""

#hide_output
out_pl = widgets.Output()
out_pl.clear_output()
with out_pl: display(img.to_thumb(128,128))

"""#### Creating a lebel"""

#hide_output
lbl_pred = widgets.Label()
lbl_pred.value = 'Please upload a galaxy image like the one above'
lbl_pred

"""#### Button for action"""

#hide_output
btn_run = widgets.Button(description='Classify')
btn_run

"""###Event handlers"""

def on_click_classify(change):
    img = PILImage.create(btn_upload.data[-1])
    out_pl.clear_output()
    with out_pl: display(img.to_thumb(128,128))
    pred,pred_idx,probs = learn_inf.predict(img)
    lbl_pred.value = f'Galaxy type: {pred} galaxy; Probability: {probs[pred_idx]:.04f}'

btn_run.on_click(on_click_classify)

"""### Creating a Vbox that contains widgets"""